{
  "openapi": "3.0.0",
  "info": {
    "title": "Express API for Tokenguard db-api service",
    "version": "1.0.0",
    "description": "This is a REST API application. It constructs and retrieves queries from PostgreSQL databases."
  },
  "servers": [
    {
      "url": "http://localhost:8082",
      "description": "Localhost development server"
    },
    {
      "url": "https://db-api.dev.tokenguard.io",
      "description": "Dev environment server"
    }
  ],
  "paths": {
    "/group-by-operation/{dbname}/{schema}/{table}": {
      "post": {
        "summary": "Perform a Group By operation with multiple grouping and aggregate columns, with optional filters",
        "description": "Performs a SELECT with a GROUP BY operation on the specified table using multiple grouping columns and aggregate columns with respective operators, and optional filters.",
        "parameters": [
          {
            "in": "path",
            "name": "dbname",
            "required": true,
            "description": "Name of the database.",
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "schema",
            "required": true,
            "description": "Name of the schema.",
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "table",
            "required": true,
            "description": "Name of the table.",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "groupByColumns": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": { "columnName": { "type": "string" } }
                    },
                    "description": "Array of objects with column names to group by"
                  },
                  "aggregateColumns": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "columnName": { "type": "string" },
                        "operator": { "type": "string" }
                      }
                    },
                    "description": "Array of objects with column name and aggregation operator"
                  },
                  "filters": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "columnName": { "type": "string" },
                        "filterValue": {
                          "oneOf": [
                            { "type": "string" },
                            {
                              "type": "object",
                              "properties": {
                                "start": { "type": "string" },
                                "end": { "type": "string" }
                              }
                            }
                          ]
                        }
                      }
                    },
                    "description": "Optional array of filter objects, each with a column name and filter value (single value or range with start and end)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully performed the group by operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": { "type": "string" }
                  }
                }
              }
            }
          },
          "400": { "description": "Invalid input parameters." },
          "500": { "description": "Server error." }
        }
      }
    },
    "/databases": {
      "get": {
        "summary": "Retrieve all databases",
        "description": "Retrieves a list of all databases in the PostgreSQL instance.",
        "responses": {
          "200": {
            "description": "Successfully retrieved all databases.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "databases": {
                      "type": "array",
                      "items": { "type": "string" }
                    }
                  }
                }
              }
            }
          },
          "500": { "description": "Server error." }
        }
      }
    },
    "/database/{dbname}/schemas": {
      "get": {
        "summary": "Retrieve all schemas",
        "description": "Retrieves a list of all schemas in the current database.",
        "parameters": [
          {
            "in": "path",
            "name": "dbname",
            "required": true,
            "description": "Name of the database.",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved all schemas.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "schemas": {
                      "type": "array",
                      "items": { "type": "string" }
                    }
                  }
                }
              }
            }
          },
          "500": { "description": "Server error." }
        }
      }
    },
    "/database/{dbname}/tables": {
      "get": {
        "summary": "Retrieve all tables",
        "description": "Retrieves a list of all tables in the current database, excluding system tables.",
        "parameters": [
          {
            "in": "path",
            "name": "dbname",
            "required": true,
            "description": "Name of the database.",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved all tables.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tables": {
                      "type": "array",
                      "items": { "type": "string" }
                    }
                  }
                }
              }
            }
          },
          "500": { "description": "Server error." }
        }
      }
    },
    "/database/{dbname}/tables/{schema}/{table}/columns": {
      "get": {
        "summary": "Retrieve columns of a table in a specific schema",
        "description": "Retrieves a list of all columns from the specified table within a given schema.",
        "parameters": [
          {
            "in": "path",
            "name": "dbname",
            "required": true,
            "description": "Name of the database.",
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "schema",
            "required": true,
            "description": "Name of the schema the table belongs to.",
            "schema": { "type": "string" }
          },
          {
            "in": "path",
            "name": "table",
            "required": true,
            "description": "Name of the table to retrieve columns from.",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved all columns from the specified table in the given schema.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "columns": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "column_name": { "type": "string" },
                          "data_type": { "type": "string" },
                          "is_nullable": { "type": "string" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Schema name and Table name are required." },
          "500": { "description": "Server error." }
        }
      }
    }
  },
  "components": {},
  "tags": []
}
